// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var commands, program;

  program = require('commander');

  commands = require('./');

  program.version(require('../package.json').version);

  program.command('new [path]').description('Create new brunch project in path [.]. Short-cut: n').option('-s, --skeleton [url-or-path]', 'path to / git URL of application skeleton (template)').action(function() {
    return commands["new"](program.args[1].skeleton, program.args[0]);
  });

  program.command('build').description('Build a brunch project. Short-cut: b').option('-c, --config [path]', 'path to config files').option('-o, --optimize', 'optimize result files (minify etc.)').action(commands.build);

  program.command('watch').description('Watch brunch directory and rebuild if something changed. Short-cut: w').option('-c, --config [path]', 'path to config files').option('-o, --optimize', 'optimize result files (minify etc.)').option('-s, --server', 'run a simple http server that would serve public dir').option('-p, --port [port]', 'if a `server` option was specified, define on which port\
 the server would run').action(commands.watch);

  exports.run = function() {
    var args, command, fullCommand;

    args = process.argv.slice();
    command = args[2];
    if (command === 'g' || command === 'd' || command === 'generate' || command === 'destroy') {
      console.error('`brunch generate / destroy` command was removed.\n\nUse scaffolt (https://github.com/paulmillr/scaffolt)\nsuccessor or similar:\n    npm install -g scaffolt\n    scaffolt <type> <name> [options]\n    scaffolt <type> <name> [options] --revert');
    }
    if (command === 't' || command === 'test') {
      console.error('`brunch test` command was removed.\n\nUse mocha-phantomjs (http://metaskills.net/mocha-phantomjs/)\nsuccessor or similar:\n    npm install -g mocha-phantomjs\n    mocha-phantomjs [options] <your-html-file-or-url>');
    }
    fullCommand = (function() {
      switch (command) {
        case 'n':
          return 'new';
        case 'b':
          return 'build';
        case 'w':
          return 'watch';
        default:
          return command;
      }
    })();
    if (fullCommand != null) {
      args[2] = fullCommand;
    }
    program.parse(args);
    if (fullCommand == null) {
      return program.help();
    }
  };

}).call(this);
