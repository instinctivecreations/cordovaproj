// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var SourceFile, async, debug, fs, getDependencies, lint, logger, makeCompiler, makeWrapper, pipeline, sysPath, updateCache;

  async = require('async');

  debug = require('debug')('brunch:source-file');

  fs = require('fs');

  sysPath = require('path');

  logger = require('loggy');

  lint = function(data, path, linters, callback) {
    if (linters.length === 0) {
      return callback(null);
    } else {
      return async.forEach(linters, function(linter, callback) {
        return linter.lint(data, path, callback);
      }, callback);
    }
  };

  getDependencies = function(data, path, compiler, callback) {
    if (compiler.getDependencies) {
      return compiler.getDependencies(data, path, callback);
    } else {
      return callback(null, []);
    }
  };

  pipeline = function(realPath, path, linters, compiler, callback) {
    var callbackError,
      _this = this;

    callbackError = function(type, stringOrError) {
      var error, string;

      string = stringOrError instanceof Error ? stringOrError.toString().slice(7) : stringOrError;
      error = new Error(string);
      error.brunchType = type;
      return callback(error);
    };
    return fs.readFile(realPath, 'utf-8', function(error, data) {
      if (error != null) {
        return callbackError('Reading', error);
      }
      return lint(data, path, linters, function(error) {
        if (error != null ? error.match(/^warn\:\s/i) : void 0) {
          logger.warn("Linting of " + path + ": " + error);
        } else {
          if (error != null) {
            return callbackError('Linting', error);
          }
        }
        return compiler.compile(data, path, function(error, compiled) {
          if (error != null) {
            return callbackError('Compiling', error);
          }
          return getDependencies(data, path, compiler, function(error, dependencies) {
            if (error != null) {
              return callbackError('Dependency parsing', error);
            }
            return callback(null, {
              dependencies: dependencies,
              compiled: compiled
            });
          });
        });
      });
    });
  };

  updateCache = function(cache, error, result, wrap) {
    var compiled, dependencies;

    if (error != null) {
      cache.error = error;
    } else {
      dependencies = result.dependencies, compiled = result.compiled;
      cache.error = null;
      cache.dependencies = dependencies;
      cache.compilationTime = Date.now();
      if (compiled != null) {
        cache.data = wrap(compiled);
      }
    }
    return cache;
  };

  makeWrapper = function(wrapper, path, isWrapped, isntModule) {
    return function(data) {
      if (isWrapped) {
        return wrapper(path, data, isntModule);
      } else {
        return data;
      }
    };
  };

  makeCompiler = function(realPath, path, cache, linters, compiler, wrap) {
    return function(callback) {
      var _this = this;

      return pipeline(realPath, path, linters, compiler, function(error, data) {
        updateCache(cache, error, data, wrap);
        if (error != null) {
          return callback(error);
        }
        return callback(null, cache.data);
      });
    };
  };

  module.exports = SourceFile = (function() {
    function SourceFile(path, compiler, linters, wrapper, isHelper, isVendor) {
      var compilerName, fileName, isWrapped, isntModule, realPath, wrap, _ref;

      isntModule = isHelper || isVendor;
      isWrapped = (_ref = compiler.type) === 'javascript' || _ref === 'template';
      realPath = path;
      this.path = isHelper ? (compilerName = compiler.constructor.name, fileName = "brunch-" + compilerName + "-" + (sysPath.basename(realPath)), sysPath.join('vendor', 'scripts', fileName)) : path;
      this.type = compiler.type;
      wrap = makeWrapper(wrapper, this.path, isWrapped, isntModule);
      this.data = '';
      this.dependencies = [];
      this.compilationTime = null;
      this.error = null;
      this.compile = makeCompiler(realPath, this.path, this, linters, compiler, wrap);
      debug("Initializing fs_utils.SourceFile: %s", JSON.stringify({
        path: this.path,
        isntModule: isntModule,
        isWrapped: isWrapped
      }));
      Object.seal(this);
    }

    return SourceFile;

  })();

}).call(this);
