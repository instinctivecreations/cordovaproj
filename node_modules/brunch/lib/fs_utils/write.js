// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var async, changedSince, formatError, generate, getFiles, getPaths, helpers, sysPath, write;

  async = require('async');

  sysPath = require('path');

  generate = require('./generate');

  helpers = require('../helpers');

  getPaths = function(sourceFile, joinConfig) {
    var sourceFileJoinConfig;

    sourceFileJoinConfig = joinConfig[sourceFile.type + 's'] || {};
    return Object.keys(sourceFileJoinConfig).filter(function(generatedFilePath) {
      var checker;

      checker = sourceFileJoinConfig[generatedFilePath];
      return checker(sourceFile.path);
    });
  };

  getFiles = function(fileList, config, joinConfig) {
    var map;

    map = {};
    fileList.files.forEach(function(file) {
      var paths;

      paths = getPaths(file, joinConfig);
      return paths.forEach(function(path) {
        var _ref;

        if ((_ref = map[path]) == null) {
          map[path] = [];
        }
        return map[path].push(file);
      });
    });
    return Object.keys(map).map(function(generatedFilePath) {
      var fullPath, sourceFiles;

      sourceFiles = map[generatedFilePath];
      fullPath = sysPath.join(config.paths["public"], generatedFilePath);
      return {
        sourceFiles: sourceFiles,
        path: fullPath
      };
    });
  };

  changedSince = function(startTime) {
    return function(generated) {
      return generated.sourceFiles.some(function(sourceFile) {
        return sourceFile.compilationTime >= startTime;
      });
    };
  };

  formatError = function(sourceFile) {
    return helpers.formatError(sourceFile.error, sourceFile.path);
  };

  module.exports = write = function(fileList, config, joinConfig, minifiers, startTime, callback) {
    var changed, errors, files, gen;

    files = getFiles(fileList, config, joinConfig);
    errors = files.map(function(generated) {
      return generated.sourceFiles.filter(function(_) {
        return _.error != null;
      }).map(formatError);
    }).reduce((function(a, b) {
      return a.concat(b);
    }), []);
    if (errors.length > 0) {
      return callback(errors.join(' ; '));
    }
    changed = files.filter(changedSince(startTime));
    gen = function(file, next) {
      return generate(file.path, file.sourceFiles, config, minifiers, next);
    };
    return async.forEach(changed, gen, function(error) {
      if (error != null) {
        return callback(error);
      }
      return callback(null, changed);
    });
  };

}).call(this);
