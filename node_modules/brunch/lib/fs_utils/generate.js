// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var common, debug, extractOrder, flatten, fs, generate, join, minify, sort, sortAlphabetically, sortByAfter, sortByBefore, sortByConfig, sortByVendor, sysPath,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  debug = require('debug')('brunch:generate');

  fs = require('fs');

  sysPath = require('path');

  common = require('./common');

  sortAlphabetically = function(a, b) {
    if (a < b) {
      return -1;
    } else if (a > b) {
      return 1;
    } else {
      return 0;
    }
  };

  sortByVendor = function(config, a, b) {
    var aIsVendor, bIsVendor;

    aIsVendor = config.vendorConvention(a);
    bIsVendor = config.vendorConvention(b);
    if (aIsVendor && !bIsVendor) {
      return -1;
    } else if (!aIsVendor && bIsVendor) {
      return 1;
    } else {
      return sortAlphabetically(a, b);
    }
  };

  sortByAfter = function(config, a, b) {
    var hasA, hasB, indexOfA, indexOfB, _ref;

    indexOfA = config.after.indexOf(a);
    indexOfB = config.after.indexOf(b);
    _ref = [indexOfA !== -1, indexOfB !== -1], hasA = _ref[0], hasB = _ref[1];
    if (hasA && !hasB) {
      return 1;
    } else if (!hasA && hasB) {
      return -1;
    } else if (hasA && hasB) {
      return indexOfA - indexOfB;
    } else {
      return sortByVendor(config, a, b);
    }
  };

  sortByBefore = function(config, a, b) {
    var hasA, hasB, indexOfA, indexOfB, _ref;

    indexOfA = config.before.indexOf(a);
    indexOfB = config.before.indexOf(b);
    _ref = [indexOfA !== -1, indexOfB !== -1], hasA = _ref[0], hasB = _ref[1];
    if (hasA && !hasB) {
      return -1;
    } else if (!hasA && hasB) {
      return 1;
    } else if (hasA && hasB) {
      return indexOfA - indexOfB;
    } else {
      return sortByAfter(config, a, b);
    }
  };

  sortByConfig = function(files, config) {
    var cfg, _ref, _ref1, _ref2;

    if (toString.call(config) === '[object Object]') {
      cfg = {
        before: (_ref = config.before) != null ? _ref : [],
        after: (_ref1 = config.after) != null ? _ref1 : [],
        vendorConvention: (_ref2 = config.vendorConvention) != null ? _ref2 : function() {
          return false;
        }
      };
      return files.slice().sort(function(a, b) {
        return sortByBefore(cfg, a, b);
      });
    } else {
      return files;
    }
  };

  flatten = function(array) {
    return array.reduce(function(acc, elem) {
      return acc.concat(Array.isArray(elem) ? flatten(elem) : [elem]);
    }, []);
  };

  extractOrder = function(files, config) {
    var after, before, orders, types, vendorConvention;

    types = files.map(function(file) {
      return file.type + 's';
    });
    orders = Object.keys(config.files).filter(function(key) {
      return __indexOf.call(types, key) >= 0;
    }).map(function(key) {
      var _ref;

      return (_ref = config.files[key].order) != null ? _ref : {};
    });
    before = flatten(orders.map(function(type) {
      var _ref;

      return (_ref = type.before) != null ? _ref : [];
    }));
    after = flatten(orders.map(function(type) {
      var _ref;

      return (_ref = type.after) != null ? _ref : [];
    }));
    vendorConvention = config._normalized.conventions.vendor;
    return {
      before: before,
      after: after,
      vendorConvention: vendorConvention
    };
  };

  sort = function(files, config) {
    var indexes, order, paths;

    paths = files.map(function(file) {
      return file.path;
    });
    indexes = Object.create(null);
    files.forEach(function(file, index) {
      return indexes[file.path] = file;
    });
    order = extractOrder(files, config);
    return sortByConfig(paths, order).map(function(path) {
      return indexes[path];
    });
  };

  join = function(files, path, type, wrapper) {
    var joined;

    debug("Joining files '" + (files.map(function(file) {
      return file.path;
    }).join(', ')) + "' to '" + path + "'");
    joined = files.map(function(file) {
      return file.data;
    }).join('');
    if (type === 'javascript') {
      return wrapper(path, joined) + joined;
    } else {
      return joined;
    }
  };

  minify = function(data, path, optimizer, isEnabled, callback) {
    if (isEnabled) {
      return (optimizer.optimize || optimizer.minify)(data, path, callback);
    } else {
      return callback(null, data);
    }
  };

  generate = function(path, sourceFiles, config, minifiers, callback) {
    var joined, optimizer, sorted, type;

    type = sourceFiles.some(function(file) {
      return file.type === 'javascript';
    }) ? 'javascript' : 'stylesheet';
    optimizer = minifiers.filter(function(minifier) {
      return minifier.type === type;
    })[0];
    sorted = sort(sourceFiles, config);
    joined = join(sorted, path, type, config._normalized.modules.definition);
    return minify(joined, path, optimizer, config.optimize, function(error, data) {
      if (error != null) {
        return callback(error);
      }
      return common.writeFile(path, data, callback);
    });
  };

  generate.sortByConfig = sortByConfig;

  module.exports = generate;

}).call(this);
